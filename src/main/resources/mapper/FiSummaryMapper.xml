<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="me.ianhe.dao.FiSummaryMapper">
    <resultMap id="BaseResultMap" type="me.ianhe.db.entity.FiSummary">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="debit_amount" property="debitAmount" jdbcType="DECIMAL"/>
        <result column="credit_amount" property="creditAmount" jdbcType="DECIMAL"/>
        <result column="balance_amount" property="balanceAmount" jdbcType="DECIMAL"/>
        <result column="customerID" property="customerID" jdbcType="INTEGER"/>
        <result column="base_date" property="baseDate" jdbcType="TIMESTAMP"/>
        <result column="due_date" property="dueDate" jdbcType="TIMESTAMP"/>
        <result column="acc_period" property="accPeriod" jdbcType="INTEGER"/>
        <result column="credit_flag" property="creditFlag" jdbcType="BIT"/>
        <result column="clear_flag" property="clearFlag" jdbcType="BIT"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="CustomerResultMap" type="me.ianhe.db.entity.FiSummary">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="debit_amount" property="debitAmount" jdbcType="DECIMAL"/>
        <result column="credit_amount" property="creditAmount" jdbcType="DECIMAL"/>
        <result column="balance_amount" property="balanceAmount" jdbcType="DECIMAL"/>
        <result column="customerID" property="customerID" jdbcType="INTEGER"/>
        <result column="base_date" property="baseDate" jdbcType="TIMESTAMP"/>
        <result column="due_date" property="dueDate" jdbcType="TIMESTAMP"/>
        <result column="acc_period" property="accPeriod" jdbcType="INTEGER"/>
        <result column="credit_flag" property="creditFlag" jdbcType="BIT"/>
        <result column="clear_flag" property="clearFlag" jdbcType="BIT"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <association property="fiCustomer" javaType="me.ianhe.db.entity.FiCustomer">
            <id column="id" property="id"/>
            <result column="customer_name" jdbcType="VARCHAR" property="customerName"/>
        </association>
    </resultMap>

    <sql id="Base_Column_List">
        id, debit_amount, credit_amount, balance_amount, customerID, base_date, due_date,
        acc_period, credit_flag, clear_flag,remark
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from fi_summary
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from fi_summary
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="me.ianhe.db.entity.FiSummary" useGeneratedKeys="true" keyProperty="id">
        insert into fi_summary (debit_amount, credit_amount, balance_amount,
        customerID, base_date, due_date,
        acc_period, credit_flag, clear_flag,remark
        )
        values (#{debitAmount,jdbcType=DECIMAL}, #{creditAmount,jdbcType=DECIMAL}, #{balanceAmount,jdbcType=DECIMAL},
        #{customerID,jdbcType=INTEGER}, #{baseDate,jdbcType=TIMESTAMP}, #{dueDate,jdbcType=TIMESTAMP},
        #{accPeriod,jdbcType=INTEGER}, #{creditFlag,jdbcType=BIT}, #{clearFlag,jdbcType=BIT},#{remark,jdbcType=VARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="me.ianhe.db.entity.FiSummary" useGeneratedKeys="true"
            keyProperty="id">
        insert into fi_summary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="debitAmount != null">
                debit_amount,
            </if>
            <if test="creditAmount != null">
                credit_amount,
            </if>
            <if test="balanceAmount != null">
                balance_amount,
            </if>
            <if test="customerID != null">
                customerID,
            </if>
            <if test="baseDate != null">
                base_date,
            </if>
            <if test="dueDate != null">
                due_date,
            </if>
            <if test="accPeriod != null">
                acc_period,
            </if>
            <if test="creditFlag != null">
                credit_flag,
            </if>
            <if test="clearFlag != null">
                clear_flag,
            </if>
            <if test="remark != null">
                remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="debitAmount != null">
                #{debitAmount,jdbcType=DECIMAL},
            </if>
            <if test="creditAmount != null">
                #{creditAmount,jdbcType=DECIMAL},
            </if>
            <if test="balanceAmount != null">
                #{balanceAmount,jdbcType=DECIMAL},
            </if>
            <if test="customerID != null">
                #{customerID,jdbcType=INTEGER},
            </if>
            <if test="baseDate != null">
                #{baseDate,jdbcType=TIMESTAMP},
            </if>
            <if test="dueDate != null">
                #{dueDate,jdbcType=TIMESTAMP},
            </if>
            <if test="accPeriod != null">
                #{accPeriod,jdbcType=INTEGER},
            </if>
            <if test="creditFlag != null">
                #{creditFlag,jdbcType=BIT},
            </if>
            <if test="clearFlag != null">
                #{clearFlag,jdbcType=BIT},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="me.ianhe.db.entity.FiSummary">
        update fi_summary
        <set>
            <if test="debitAmount != null">
                debit_amount = #{debitAmount,jdbcType=DECIMAL},
            </if>
            <if test="creditAmount != null">
                credit_amount = #{creditAmount,jdbcType=DECIMAL},
            </if>
            <if test="balanceAmount != null">
                balance_amount = #{balanceAmount,jdbcType=DECIMAL},
            </if>
            <if test="customerID != null">
                customerID = #{customerID,jdbcType=INTEGER},
            </if>
            <if test="baseDate != null">
                base_date = #{baseDate,jdbcType=TIMESTAMP},
            </if>
            <if test="dueDate != null">
                due_date = #{dueDate,jdbcType=TIMESTAMP},
            </if>
            <if test="accPeriod != null">
                acc_period = #{accPeriod,jdbcType=INTEGER},
            </if>
            <if test="creditFlag != null">
                credit_flag = #{creditFlag,jdbcType=BIT},
            </if>
            <if test="clearFlag != null">
                clear_flag = #{clearFlag,jdbcType=BIT},
            </if>
            <if test="remark != null">
                remark = #{clearFlag,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="me.ianhe.db.entity.FiSummary">
        update fi_summary
        set debit_amount = #{debitAmount,jdbcType=DECIMAL},
        credit_amount = #{creditAmount,jdbcType=DECIMAL},
        balance_amount = #{balanceAmount,jdbcType=DECIMAL},
        customerID = #{customerID,jdbcType=INTEGER},
        base_date = #{baseDate,jdbcType=TIMESTAMP},
        due_date = #{dueDate,jdbcType=TIMESTAMP},
        acc_period = #{accPeriod,jdbcType=INTEGER},
        credit_flag = #{creditFlag,jdbcType=BIT},
        clear_flag = #{clearFlag,jdbcType=BIT},
        remark = #{remark,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="listByCondition" resultMap="CustomerResultMap">
        select
        fi_summary.*,fi_customer.*
        from fi_summary,fi_customer
        WHERE fi_summary.customerID = fi_customer.id
    </select>
    <select id="listCount" resultType="int">
        select
        count(id)
        from fi_summary
    </select>
    <select id="getSummaryByCustomerID" resultType="me.ianhe.db.entity.FiSummary">
        select
        <include refid="Base_Column_List"/>
        from fi_summary
        where customerID = #{customerID,jdbcType=INTEGER}
        and balance_amount &gt; 0
        order by due_date
    </select>

    <select id="getIntervalSummary" resultType="HashMap">
        SELECT
        customer.id AS customerID,
        customer.customer_name AS customerName,
        SUM(summary.debit_amount) AS totalDebitAmount,
        SUM(summary.credit_amount) AS totalCreditAmount,
        SUM(summary.balance_amount) AS totalBalanceAmount,
        <if test="curDate != null">
            SUM(IF(#{curDate,jdbcType=TIMESTAMP} BETWEEN DATE_ADD(summary.due_date, INTERVAL 0 DAY) AND
            DATE_ADD(summary.due_date,
            INTERVAL 15 DAY),
            summary.balance_amount, 0)) AS amt15,
            SUM(IF(#{curDate,jdbcType=TIMESTAMP} BETWEEN DATE_ADD(summary.due_date, INTERVAL 16 DAY) AND
            DATE_ADD(summary.due_date,
            INTERVAL 30 DAY),
            summary.balance_amount, 0)) AS amt30,
            SUM(IF(#{curDate,jdbcType=TIMESTAMP} BETWEEN DATE_ADD(summary.due_date, INTERVAL 31 DAY) AND
            DATE_ADD(summary.due_date,
            INTERVAL 60 DAY),
            summary.balance_amount, 0)) AS amt60,
            SUM(IF(#{curDate,jdbcType=TIMESTAMP} BETWEEN DATE_ADD(summary.due_date, INTERVAL 61 DAY) AND
            DATE_ADD(summary.due_date,
            INTERVAL 90 DAY),
            summary.balance_amount, 0)) AS amt90,
            SUM(IF(#{curDate,jdbcType=TIMESTAMP} BETWEEN DATE_ADD(summary.due_date, INTERVAL 91 DAY) AND
            DATE_ADD(summary.due_date,
            INTERVAL 120 DAY),
            summary.balance_amount, 0)) AS amt120
        </if>
        <if test="curDate == null">
            SUM(IF(CURDATE() BETWEEN DATE_ADD(summary.due_date, INTERVAL 0 DAY) AND DATE_ADD(summary.due_date, INTERVAL
            15 DAY),
            summary.balance_amount, 0)) AS amt15,
            SUM(IF(CURDATE() BETWEEN DATE_ADD(summary.due_date, INTERVAL 16 DAY) AND DATE_ADD(summary.due_date, INTERVAL
            30 DAY),
            summary.balance_amount, 0)) AS amt30,
            SUM(IF(CURDATE() BETWEEN DATE_ADD(summary.due_date, INTERVAL 31 DAY) AND DATE_ADD(summary.due_date, INTERVAL
            60 DAY),
            summary.balance_amount, 0)) AS amt60,
            SUM(IF(CURDATE() BETWEEN DATE_ADD(summary.due_date, INTERVAL 61 DAY) AND DATE_ADD(summary.due_date, INTERVAL
            90 DAY),
            summary.balance_amount, 0)) AS amt90,
            SUM(IF(CURDATE() BETWEEN DATE_ADD(summary.due_date, INTERVAL 91 DAY) AND DATE_ADD(summary.due_date, INTERVAL
            120 DAY),
            summary.balance_amount, 0)) AS amt120
        </if>
        FROM fi_summary summary
        left join fi_customer customer
        on customer.id = summary.customerID
        WHERE summary.balance_amount &gt;= 0
        GROUP BY summary.customerID
    </select>
    <select id="getIntervalSummaryCount" resultType="int">
        select count(*) from (
        SELECT
        count(customerID)
        FROM fi_summary
        WHERE balance_amount &gt;= 0
        GROUP BY customerID
        ) tmp
    </select>
    <select id="getSummaryByAcing" resultType="HashMap">
        SELECT
        summary.customerID,
        summary.base_date baseDate,
        summary.due_date dueDate,
        summary.acc_period accPeriod,
        summary.debit_amount debitAmount,
        summary.credit_amount creditAmount,
        summary.balance_amount balanceAmount
        FROM fi_summary summary
        <where>
            summary.`customerID` = #{customerID,jdbcType=INTEGER}
            AND summary.balance_amount &gt;= 0
            <if test="start != null and end != null">
                <if test="date != null">
                    AND #{date,jdbcType=TIMESTAMP} BETWEEN DATE_ADD(summary.due_date, INTERVAL
                    #{start,jdbcType=INTEGER} DAY)
                    AND DATE_ADD(summary.due_date, INTERVAL #{end,jdbcType=INTEGER} DAY)
                </if>
                <if test="date == null">
                    AND CURDATE() BETWEEN DATE_ADD(summary.due_date, INTERVAL #{start,jdbcType=INTEGER} DAY)
                    AND DATE_ADD(summary.due_date, INTERVAL #{end,jdbcType=INTEGER} DAY)
                </if>
            </if>
        </where>
    </select>
    <select id="getAlreadyClear" resultType="HashMap">
        SELECT
        summary.`base_date` baseDate,
        summary.`due_date` dueDate,
        summary.`customerID`,
        summary.`acc_period` accPeriod,
        clear.actual_amt actualAmount,
        clear.before_balance beforeAmount,
        clear.after_balance afterAmount,
        payment.payment_amount paymentAmount,
        payment.receipt_date receiptDate,
        payment.remark
        FROM
        fi_clear clear
        INNER JOIN
        fi_summary summary ON clear.summary_ID = summary.id
        LEFT JOIN
        fi_customer customer ON summary.customerID = customer.id
        LEFT JOIN
        fi_payment payment ON clear.paymentID = payment.id
        WHERE
        summary.customerID = #{customerID,jdbcType=INTEGER}
    </select>
</mapper>