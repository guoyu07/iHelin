<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="me.ianhe.dao.PoemMapper">
    <resultMap id="BaseResultMap" type="me.ianhe.db.entity.Poem">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="me.ianhe.db.entity.Poem" extends="BaseResultMap">
        <result column="content" property="content" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, title
    </sql>
    <sql id="Blob_Column_List">
        content
    </sql>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from poem
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="getByRandom" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from poem order by rand() LIMIT 1
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from poem
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="me.ianhe.db.entity.Poem" useGeneratedKeys="true" keyProperty="id">
        insert into poem (title, content)
        values (#{title,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertBatch" parameterType="java.util.List">
        insert into poem(title,content)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.title},#{item.content})
        </foreach>
    </insert>
    <insert id="insertSelective" parameterType="me.ianhe.db.entity.Poem" useGeneratedKeys="true" keyProperty="id">
        insert into poem
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="title != null">
                title,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="me.ianhe.db.entity.Poem">
        update poem
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="me.ianhe.db.entity.Poem">
        update poem
        set title = #{title,jdbcType=VARCHAR},
        content = #{content,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="me.ianhe.db.entity.Poem">
        update poem
        set title = #{title,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

</mapper>